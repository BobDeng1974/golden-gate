<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group___queues" kind="group">
    <compoundname>Queues</compoundname>
    <title>Queues</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___queues_1gab7255e6be8d33853c76d8fdf8d43f31e" prot="public" static="no">
        <type>struct <ref refid="group___queues_1gab7255e6be8d33853c76d8fdf8d43f31e" kindref="member">GG_SharedQueue</ref></type>
        <definition>typedef struct GG_SharedQueue GG_SharedQueue</definition>
        <argsstring></argsstring>
        <name>GG_SharedQueue</name>
        <briefdescription>
<para>Queue that may be used concurrently in multiple threads. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_queues.h" line="110" column="1" bodyfile="xp/common/gg_queues.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___queues_1gabf4eb83c84aa0773a714fe1242b6b8f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_SharedQueue_Create</definition>
        <argsstring>(unsigned int max_items, GG_SharedQueue **queue)</argsstring>
        <name>GG_SharedQueue_Create</name>
        <param>
          <type>unsigned int</type>
          <declname>max_items</declname>
        </param>
        <param>
          <type><ref refid="group___queues_1gab7255e6be8d33853c76d8fdf8d43f31e" kindref="member">GG_SharedQueue</ref> **</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new GG_SharedQueue object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_items</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of items the queue can hold, or 0 to indicate that an unlimited number of items may be queued. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a variable where the created object will be returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___errors_1ga74ac21a451c08367bf69467eb4756490" kindref="member">GG_SUCCESS</ref> if the object could be created, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_queues.h" line="54" column="11" declfile="xp/common/gg_queues.h" declline="54" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___queues_1ga70e501b64e39b687e3427f8a21a9ba82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_SharedQueue_Destroy</definition>
        <argsstring>(GG_SharedQueue *self)</argsstring>
        <name>GG_SharedQueue_Destroy</name>
        <param>
          <type><ref refid="group___queues_1gab7255e6be8d33853c76d8fdf8d43f31e" kindref="member">GG_SharedQueue</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy the object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>THe object on which this method is called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_queues.h" line="61" column="6" declfile="xp/common/gg_queues.h" declline="61" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___queues_1ga89202c81b4ace1dbe3f8cc9b2da934a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_SharedQueue_Stuff</definition>
        <argsstring>(GG_SharedQueue *self, GG_LinkedListNode *item)</argsstring>
        <name>GG_SharedQueue_Stuff</name>
        <param>
          <type><ref refid="group___queues_1gab7255e6be8d33853c76d8fdf8d43f31e" kindref="member">GG_SharedQueue</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="struct_g_g___linked_list_node" kindref="compound">GG_LinkedListNode</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add an item to the queue.</para>
<para>This method is <emphasis>not</emphasis> thread-safe, so it must not be called concurrently with other methods. This is typically used at initialization time to fill a queue with initial items just after creating it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is called. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The item to add to the queue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___errors_1ga74ac21a451c08367bf69467eb4756490" kindref="member">GG_SUCCESS</ref> if the item could be added, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_queues.h" line="74" column="11" declfile="xp/common/gg_queues.h" declline="74" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___queues_1ga339768a7a9df5a91834ad5d791a535bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_SharedQueue_Enqueue</definition>
        <argsstring>(GG_SharedQueue *self, GG_LinkedListNode *item, GG_Timeout timeout)</argsstring>
        <name>GG_SharedQueue_Enqueue</name>
        <param>
          <type><ref refid="group___queues_1gab7255e6be8d33853c76d8fdf8d43f31e" kindref="member">GG_SharedQueue</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="struct_g_g___linked_list_node" kindref="compound">GG_LinkedListNode</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="group___types_1ga8d5b02477db6ded92e2bb7e5dcfae9f1" kindref="member">GG_Timeout</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enqueue an item.</para>
<para>This function may be called from any thread. It may block until there is space in the queue or a specified timeout expires.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is called. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The item to enqueue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum time the caller is willing to wait, in milliseconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___errors_1ga74ac21a451c08367bf69467eb4756490" kindref="member">GG_SUCCESS</ref> if the item was enqueued, <ref refid="group___errors_1ga9671274df6309ec48be9c90023856619" kindref="member">GG_ERROR_TIMEOUT</ref> if the specified timeout expired, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_queues.h" line="88" column="11" declfile="xp/common/gg_queues.h" declline="88" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___queues_1gae05391f89b0f760bd90df1b6c2cb4466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_SharedQueue_Dequeue</definition>
        <argsstring>(GG_SharedQueue *self, GG_LinkedListNode **item, GG_Timeout timeout)</argsstring>
        <name>GG_SharedQueue_Dequeue</name>
        <param>
          <type><ref refid="group___queues_1gab7255e6be8d33853c76d8fdf8d43f31e" kindref="member">GG_SharedQueue</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="struct_g_g___linked_list_node" kindref="compound">GG_LinkedListNode</ref> **</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="group___types_1ga8d5b02477db6ded92e2bb7e5dcfae9f1" kindref="member">GG_Timeout</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dequeue an item.</para>
<para>This function may be called from any thread. It may block until there is at least one item available in the queue, or a specified timeout expires.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is called. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a variable in which the dequeued item will be returned, if any. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum time the caller is willing to wait, in milliseconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___errors_1ga74ac21a451c08367bf69467eb4756490" kindref="member">GG_SUCCESS</ref> if an item was dequeued, <ref refid="group___errors_1ga9671274df6309ec48be9c90023856619" kindref="member">GG_ERROR_TIMEOUT</ref> if the specified timeout expired, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_queues.h" line="102" column="11" declfile="xp/common/gg_queues.h" declline="102" declcolumn="11"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>General purpose queues </para>
    </detaileddescription>
  </compounddef>
</doxygen>
