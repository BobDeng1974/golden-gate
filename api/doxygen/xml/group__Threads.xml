<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group__Threads" kind="group">
    <compoundname>Threads</compoundname>
    <title>Threads</title>
    <innerclass refid="classGG__Mutex" prot="public">GG_Mutex</innerclass>
    <innerclass refid="classGG__Semaphore" prot="public">GG_Semaphore</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__Threads_1ga9f4b6a6ff1dd4e1feeffd06098fa341c" prot="public" static="no">
        <type>uintptr_t</type>
        <definition>typedef uintptr_t GG_ThreadId</definition>
        <argsstring></argsstring>
        <name>GG_ThreadId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Thread identifier. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="40" column="19" bodyfile="xp/common/gg_threads.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__Threads_1ga7903f2029964736efabef65cb047cfd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_ThreadGuard_SetMainLoopThreadId</definition>
        <argsstring>(GG_ThreadId thread_id)</argsstring>
        <name>GG_ThreadGuard_SetMainLoopThreadId</name>
        <param>
          <type><ref refid="group__Threads_1ga9f4b6a6ff1dd4e1feeffd06098fa341c" kindref="member">GG_ThreadId</ref></type>
          <declname>thread_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the ID of the thread used to compare against when calling <ref refid="group__Threads_1ga3585e7580b065588671c1d7c6c7a5334" kindref="member">GG_ThreadGuard_CheckCurrentThreadIsMainLoop()</ref>. By default, the target thread ID is set to 0, which is used as a special value that matches all threads.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the thread ID to check against, or 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="109" column="6" declfile="xp/common/gg_threads.h" declline="109" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Threads_1ga3585e7580b065588671c1d7c6c7a5334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GG_ThreadGuard_CheckCurrentThreadIsMainLoop</definition>
        <argsstring>(const char *caller_name)</argsstring>
        <name>GG_ThreadGuard_CheckCurrentThreadIsMainLoop</name>
        <param>
          <type>const char *</type>
          <declname>caller_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check that the current thread matches the target set previously. This function is a convenience function to allow logging and setting breakpoints when a mismatch is detected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>caller_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the caller (for logging), or NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the current thread matches the target thread ID or if the target thread ID is 0; returns <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="121" column="6" declfile="xp/common/gg_threads.h" declline="121" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Threads_1ga972abff41ac6fc380f38619c5398e414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GG_ThreadGuard_CheckCurrentThreadIsExpected</definition>
        <argsstring>(GG_ThreadId thread_id, const char *caller_name)</argsstring>
        <name>GG_ThreadGuard_CheckCurrentThreadIsExpected</name>
        <param>
          <type><ref refid="group__Threads_1ga9f4b6a6ff1dd4e1feeffd06098fa341c" kindref="member">GG_ThreadId</ref></type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>caller_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check that the current thread matches an expected thread. This function is a convenience function to allow logging and setting breakpoints when a mismatch is detected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected thread ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>caller_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the caller (for logging), or NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the current thread matches the expected thread ID or <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="134" column="6" declfile="xp/common/gg_threads.h" declline="134" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__Threads_1gaae8995f2c5e3772ee3a7b79313371680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__Errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_Mutex_Create</definition>
        <argsstring>(GG_Mutex **mutex)</argsstring>
        <name>GG_Mutex_Create</name>
        <param>
          <type><ref refid="classGG__Mutex" kindref="compound">GG_Mutex</ref> **</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a mutex object</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a variable in which the mutex will be returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GG_SUCCESS if the mutex could be created, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="152" column="1" declfile="xp/common/gg_threads.h" declline="152" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Threads_1gafe5f3585deb1344d65c2dd560f647ab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__Threads_1ga9f4b6a6ff1dd4e1feeffd06098fa341c" kindref="member">GG_ThreadId</ref></type>
        <definition>GG_ThreadId GG_GetCurrentThreadId</definition>
        <argsstring>(void)</argsstring>
        <name>GG_GetCurrentThreadId</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the identifier of the current thread.</para>
<para><simplesect kind="return"><para>The identifier of the current thread. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="209" column="1" declfile="xp/common/gg_threads.h" declline="209" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Threads_1gaa82e5bd25d44cb151d17d1695142d53b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__Errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_Semaphore_Create</definition>
        <argsstring>(unsigned int initial_value, GG_Semaphore **semaphore)</argsstring>
        <name>GG_Semaphore_Create</name>
        <param>
          <type>unsigned int</type>
          <declname>initial_value</declname>
        </param>
        <param>
          <type><ref refid="classGG__Semaphore" kindref="compound">GG_Semaphore</ref> **</type>
          <declname>semaphore</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a semaphore object</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initial_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value of the semaphore. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>semaphore</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a variable in which the semaphore will be returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GG_SUCCESS if the semaphore could be created, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="227" column="1" declfile="xp/common/gg_threads.h" declline="227" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Threads_1ga1ba17a80f2c144726dadecad61147aff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__Errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_Mutex_LockAutoCreate</definition>
        <argsstring>(GG_Mutex **mutex)</argsstring>
        <name>GG_Mutex_LockAutoCreate</name>
        <param>
          <type><ref refid="classGG__Mutex" kindref="compound">GG_Mutex</ref> **</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mutex locking/creation</para>
<para>This is useful for creating/locking mutexes that are used as singletons for example. if *mutex is NULL, the mutex will be created in a thread-safe manner (it is ok to have several threads try to create the same mutex at the same time), and will then be locked. Otherwise, it will just be locked.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a variable in which the mutex will be returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__Errors_1ga74ac21a451c08367bf69467eb4756490" kindref="member">GG_SUCCESS</ref> if the mutex could be created, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="169" column="1" declfile="xp/common/gg_threads.h" declline="169" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Threads_1gae9e2877d7b30ba04980c7000817d7872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__Errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_Mutex_Lock</definition>
        <argsstring>(GG_Mutex *self)</argsstring>
        <name>GG_Mutex_Lock</name>
        <param>
          <type><ref refid="classGG__Mutex" kindref="compound">GG_Mutex</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lock a mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__Errors_1ga74ac21a451c08367bf69467eb4756490" kindref="member">GG_SUCCESS</ref> if the mutex could be locked, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="180" column="1" declfile="xp/common/gg_threads.h" declline="180" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Threads_1gae51dc97814b4332548e1b55ee003a73a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__Errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_Mutex_Unlock</definition>
        <argsstring>(GG_Mutex *self)</argsstring>
        <name>GG_Mutex_Unlock</name>
        <param>
          <type><ref refid="classGG__Mutex" kindref="compound">GG_Mutex</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unlock a mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__Errors_1ga74ac21a451c08367bf69467eb4756490" kindref="member">GG_SUCCESS</ref> if the mutex could be locked, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="191" column="1" declfile="xp/common/gg_threads.h" declline="191" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Threads_1ga5ad0d3388bd9d9c537b96dec616c8827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_Mutex_Destroy</definition>
        <argsstring>(GG_Mutex *self)</argsstring>
        <name>GG_Mutex_Destroy</name>
        <param>
          <type><ref refid="classGG__Mutex" kindref="compound">GG_Mutex</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="201" column="1" declfile="xp/common/gg_threads.h" declline="201" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Threads_1ga2c8500d5b1e7af0a919505af03d0c99a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_Semaphore_Acquire</definition>
        <argsstring>(GG_Semaphore *self)</argsstring>
        <name>GG_Semaphore_Acquire</name>
        <param>
          <type><ref refid="classGG__Semaphore" kindref="compound">GG_Semaphore</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Acquire a semaphore. This method blocks while the semaphore value is 0, then decrements the value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="238" column="1" declfile="xp/common/gg_threads.h" declline="238" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Threads_1gae967d0fca959a558d12c3d4e8cb2f128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_Semaphore_Release</definition>
        <argsstring>(GG_Semaphore *self)</argsstring>
        <name>GG_Semaphore_Release</name>
        <param>
          <type><ref refid="classGG__Semaphore" kindref="compound">GG_Semaphore</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Release a semaphore. This method increments the semaphore value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="249" column="1" declfile="xp/common/gg_threads.h" declline="249" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Threads_1ga5de66d6709017c7c6239b70caff65fcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_Semaphore_Destroy</definition>
        <argsstring>(GG_Semaphore *self)</argsstring>
        <name>GG_Semaphore_Destroy</name>
        <param>
          <type><ref refid="classGG__Semaphore" kindref="compound">GG_Semaphore</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a semaphore.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="259" column="1" declfile="xp/common/gg_threads.h" declline="259" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__Threads_1ga369b2439bae845d0ca7eb24092d20712" prot="public" static="no">
        <name>GG_THREAD_GUARD_ENABLE_BINDING</name>
        <initializer><ref refid="group__Threads_1ga9f4b6a6ff1dd4e1feeffd06098fa341c" kindref="member">GG_ThreadId</ref> _bound_thread_id;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use this macro in an object field declaration to enable thread binding </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="48" column="9" bodyfile="xp/common/gg_threads.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Threads_1gacc27a161b8fa7fa9e42def92986e08b6" prot="public" static="no">
        <name>GG_THREAD_GUARD_BIND</name>
        <param><defname>_object</defname></param>
        <initializer>do {                 \
    (_object)-&gt;_bound_thread_id = <ref refid="group__Threads_1gafe5f3585deb1344d65c2dd560f647ab3" kindref="member">GG_GetCurrentThreadId</ref>(); \
} while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bind an object to the current thread ID <blockquote><para>NOTE: the object must support thread binding, which is done by using </para>
</blockquote>the GG_THREAD_GUARD_ENABLE_BINDING macro in the object declaration. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="55" column="9" bodyfile="xp/common/gg_threads.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Threads_1ga237f652010423d576898698f3926ead7" prot="public" static="no">
        <name>GG_THREAD_GUARD_IS_CURRENT_THREAD_BOUND</name>
        <param><defname>_object</defname></param>
        <initializer>((_object)-&gt;_bound_thread_id == <ref refid="group__Threads_1gafe5f3585deb1344d65c2dd560f647ab3" kindref="member">GG_GetCurrentThreadId</ref>())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether or not the current thread is the object&apos;s bound thread </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="62" column="9" bodyfile="xp/common/gg_threads.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Threads_1ga73bdb6283537d61cf29ec0e73aa059b6" prot="public" static="no">
        <name>GG_THREAD_GUARD_IS_OBJECT_BOUND</name>
        <param><defname>_object</defname></param>
        <initializer>((_object)-&gt;_bound_thread_id != 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether or not an object is bound to a thread </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="68" column="9" bodyfile="xp/common/gg_threads.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Threads_1ga7ad7df7274e68375e74bc17000c681a7" prot="public" static="no">
        <name>GG_THREAD_GUARD_CHECK_BINDING</name>
        <param><defname>_object</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="96" column="9" bodyfile="xp/common/gg_threads.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__Threads_1ga5590972afb637f12f67ce344bc9e5734" prot="public" static="no">
        <name>GG_THREAD_GUARD_CHECK_MAIN_LOOP</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="97" column="9" bodyfile="xp/common/gg_threads.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Classes and functions related the multi-threading </para>
    </detaileddescription>
  </compounddef>
</doxygen>
