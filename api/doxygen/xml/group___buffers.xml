<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group___buffers" kind="group">
    <compoundname>Buffers</compoundname>
    <title>Data Buffers</title>
    <innerclass refid="struct_g_g___static_buffer" prot="public">GG_StaticBuffer</innerclass>
    <innerclass refid="struct_g_g___static_buffer_source" prot="public">GG_StaticBufferSource</innerclass>
    <innerclass refid="struct_g_g___ring_buffer" prot="public">GG_RingBuffer</innerclass>
    <innerclass refid="interface_g_g___buffer" prot="public">GG_Buffer</innerclass>
    <innerclass refid="struct_g_g___buffer_interface" prot="public">GG_BufferInterface</innerclass>
    <innerclass refid="class_g_g___dynamic_buffer" prot="public">GG_DynamicBuffer</innerclass>
    <innerclass refid="class_g_g___sub_buffer" prot="public">GG_SubBuffer</innerclass>
    <innerclass refid="interface_g_g___buffer_source" prot="public">GG_BufferSource</innerclass>
    <innerclass refid="struct_g_g___buffer_source_interface" prot="public">GG_BufferSourceInterface</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___buffers_1ga18d56db632d183597ccb9a2d63f77d7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GG_DECLARE_INTERFACE</definition>
        <argsstring>(GG_Buffer)</argsstring>
        <name>GG_DECLARE_INTERFACE</name>
        <param>
          <type><ref refid="interface_g_g___buffer" kindref="compound">GG_Buffer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Retain a reference to this object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The retained object (which may or may not be the same pointer as the one on which this method is called).</para>
</simplesect>
Release a reference to this object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Obtain a read-only pointer to the data represented by a buffer object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Const pointer to the data.</para>
</simplesect>
Obtain a read-write pointer to the data represented by a buffer object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the data, or NULL if the object&apos;s data is read-only.</para>
</simplesect>
Get the size of the data represented by a buffer object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The size of the data.</para>
</simplesect>
</para>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="40" column="1" bodyfile="xp/common/gg_buffer.h" bodystart="40" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1gada7806eee2f0835dbc99c5a307f82f77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GG_DECLARE_INTERFACE</definition>
        <argsstring>(GG_BufferSource)</argsstring>
        <name>GG_DECLARE_INTERFACE</name>
        <param>
          <type><ref refid="interface_g_g___buffer_source" kindref="compound">GG_BufferSource</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Get the buffer data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to which to write the data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Get the size of the data represented by the object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The size of the data.</para>
</simplesect>
</para>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="318" column="1" bodyfile="xp/common/gg_buffer.h" bodystart="318" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga41bc22774de4e43ce8f58b526e97fe09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_RingBuffer_Init</definition>
        <argsstring>(GG_RingBuffer *self, uint8_t *buffer, size_t buffer_size)</argsstring>
        <name>GG_RingBuffer_Init</name>
        <param>
          <type><ref refid="struct_g_g___ring_buffer" kindref="compound">GG_RingBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffer_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize a ring buffer object</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the memory buffer used as storage for the object. This buffer needs to stay allocated at least as long as the ring buffer object that is being initialized by this call. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_ring_buffer.h" line="59" column="6" declfile="xp/common/gg_ring_buffer.h" declline="59" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga706ae8d501c3729a4fc5e4e6fadb0105" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GG_RingBuffer_GetSpace</definition>
        <argsstring>(GG_RingBuffer *self)</argsstring>
        <name>GG_RingBuffer_GetSpace</name>
        <param>
          <type><ref refid="struct_g_g___ring_buffer" kindref="compound">GG_RingBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the writable space in the buffer (how much can be written).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes that can be written to the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_ring_buffer.h" line="67" column="8" declfile="xp/common/gg_ring_buffer.h" declline="67" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1gacdd1c264bb216484311333939bf4bfad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GG_RingBuffer_GetContiguousSpace</definition>
        <argsstring>(GG_RingBuffer *self)</argsstring>
        <name>GG_RingBuffer_GetContiguousSpace</name>
        <param>
          <type><ref refid="struct_g_g___ring_buffer" kindref="compound">GG_RingBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of bytes that can be writen contiguously given the current state of the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The contiguous space available in the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_ring_buffer.h" line="76" column="8" declfile="xp/common/gg_ring_buffer.h" declline="76" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1gabedc652314eaccedfc441edc05265e44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GG_RingBuffer_GetAvailable</definition>
        <argsstring>(GG_RingBuffer *self)</argsstring>
        <name>GG_RingBuffer_GetAvailable</name>
        <param>
          <type><ref refid="struct_g_g___ring_buffer" kindref="compound">GG_RingBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the amount of data available from the buffer (how much can be read).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes that can be read from the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_ring_buffer.h" line="84" column="8" declfile="xp/common/gg_ring_buffer.h" declline="84" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga29313789ea704f8240639af164dadaa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GG_RingBuffer_GetContiguousAvailable</definition>
        <argsstring>(GG_RingBuffer *self)</argsstring>
        <name>GG_RingBuffer_GetContiguousAvailable</name>
        <param>
          <type><ref refid="struct_g_g___ring_buffer" kindref="compound">GG_RingBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the amount of data availble from the buffer in a single contiguous block.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of contiguous bytes available. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_ring_buffer.h" line="92" column="8" declfile="xp/common/gg_ring_buffer.h" declline="92" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga7832d3c7783413626abe66f5d6a203f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t GG_RingBuffer_ReadByte</definition>
        <argsstring>(GG_RingBuffer *self)</argsstring>
        <name>GG_RingBuffer_ReadByte</name>
        <param>
          <type><ref refid="struct_g_g___ring_buffer" kindref="compound">GG_RingBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read one byte from the buffer. NOTE: This method does not do any bounds checking, so it always returns a value regardless of whether any data is available from the buffer or not. So it should only be called when the caller knows that data is available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The byte read from the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_ring_buffer.h" line="103" column="9" declfile="xp/common/gg_ring_buffer.h" declline="103" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1gab31cc1db7fc08381b3e24bb4e743e2f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GG_RingBuffer_Read</definition>
        <argsstring>(GG_RingBuffer *self, uint8_t *buffer, size_t size)</argsstring>
        <name>GG_RingBuffer_Read</name>
        <param>
          <type><ref refid="struct_g_g___ring_buffer" kindref="compound">GG_RingBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read data from the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory into which to read the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes actually read (which may be less than the requested amount if the buffer doesn&apos;t have enough data). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_ring_buffer.h" line="115" column="8" declfile="xp/common/gg_ring_buffer.h" declline="115" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga0dc03056d9c92ef6c1dbb56f3ab4188d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t GG_RingBuffer_PeekByte</definition>
        <argsstring>(GG_RingBuffer *self, size_t offset)</argsstring>
        <name>GG_RingBuffer_PeekByte</name>
        <param>
          <type><ref refid="struct_g_g___ring_buffer" kindref="compound">GG_RingBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Peek one byte from the buffer. NOTE: this method does not perform any bounds checking. It always returns a value regardless of whether there is enough data in the buffer or not. So it should only be called when the bounds are otherwise known by the caller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset from the first available byte.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The byte at the specified offset. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_ring_buffer.h" line="130" column="9" declfile="xp/common/gg_ring_buffer.h" declline="130" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga00a0306d6c33876f9e0752c0ef7257cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GG_RingBuffer_Peek</definition>
        <argsstring>(GG_RingBuffer *self, uint8_t *buffer, size_t offset, size_t size)</argsstring>
        <name>GG_RingBuffer_Peek</name>
        <param>
          <type><ref refid="struct_g_g___ring_buffer" kindref="compound">GG_RingBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Peek data from the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory into which to store the peeked data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset from the start of the available data to peek from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to peek at.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes actually peeked (which may be less than the requested amount if the buffer doesnt have enough data). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_ring_buffer.h" line="143" column="8" declfile="xp/common/gg_ring_buffer.h" declline="143" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga8041ca582d5ed393b3b093361c309013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GG_RingBuffer_Write</definition>
        <argsstring>(GG_RingBuffer *self, const uint8_t *buffer, size_t size)</argsstring>
        <name>GG_RingBuffer_Write</name>
        <param>
          <type><ref refid="struct_g_g___ring_buffer" kindref="compound">GG_RingBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write data to the buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the data to write.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes actually written (which may be less than the requested amount if the buffer doesn&apos;t have enough space). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_ring_buffer.h" line="158" column="8" declfile="xp/common/gg_ring_buffer.h" declline="158" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1gab48af8d09d1d4e5ca7328b98dd807463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_RingBuffer_MoveIn</definition>
        <argsstring>(GG_RingBuffer *self, size_t offset)</argsstring>
        <name>GG_RingBuffer_MoveIn</name>
        <param>
          <type><ref refid="struct_g_g___ring_buffer" kindref="compound">GG_RingBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move the ring&apos;s <computeroutput>in</computeroutput> pointer of the buffer. This method may be useful if data is directly copied to the buffer without calling GG_RingBuffer_Write.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes by which to advance the <computeroutput>in</computeroutput> pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_ring_buffer.h" line="170" column="6" declfile="xp/common/gg_ring_buffer.h" declline="170" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga12d65dcf23ce2f337a4cdf34e5d54836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_RingBuffer_MoveOut</definition>
        <argsstring>(GG_RingBuffer *self, size_t offset)</argsstring>
        <name>GG_RingBuffer_MoveOut</name>
        <param>
          <type><ref refid="struct_g_g___ring_buffer" kindref="compound">GG_RingBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move the ring&apos;s <computeroutput>out</computeroutput> pointer of the buffer. This method may be useful if data is directly copied out the buffer without calling GG_RingBuffer_Read.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes by which to advance the <computeroutput>out</computeroutput> pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_ring_buffer.h" line="180" column="6" declfile="xp/common/gg_ring_buffer.h" declline="180" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga8aaf76c019c30767bd0fd54f3188d2d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_RingBuffer_Reset</definition>
        <argsstring>(GG_RingBuffer *self)</argsstring>
        <name>GG_RingBuffer_Reset</name>
        <param>
          <type><ref refid="struct_g_g___ring_buffer" kindref="compound">GG_RingBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset the buffer to its initial empty state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_ring_buffer.h" line="187" column="6" declfile="xp/common/gg_ring_buffer.h" declline="187" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga6af313cb369183f7ef343cd73691282d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interface_g_g___buffer" kindref="compound">GG_Buffer</ref> *</type>
        <definition>GG_Buffer * GG_Buffer_Retain</definition>
        <argsstring>(GG_Buffer *self)</argsstring>
        <name>GG_Buffer_Retain</name>
        <param>
          <type><ref refid="interface_g_g___buffer" kindref="compound">GG_Buffer</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="90" column="11" declfile="xp/common/gg_buffer.h" declline="90" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga852cf21610f14b8a8312eed8a78d5342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_Buffer_Release</definition>
        <argsstring>(GG_Buffer *self)</argsstring>
        <name>GG_Buffer_Release</name>
        <param>
          <type><ref refid="interface_g_g___buffer" kindref="compound">GG_Buffer</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="94" column="6" declfile="xp/common/gg_buffer.h" declline="94" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga095e75a71654105904cb903e0e198ba8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const uint8_t *</type>
        <definition>const uint8_t * GG_Buffer_GetData</definition>
        <argsstring>(const GG_Buffer *self)</argsstring>
        <name>GG_Buffer_GetData</name>
        <param>
          <type>const <ref refid="interface_g_g___buffer" kindref="compound">GG_Buffer</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="98" column="15" declfile="xp/common/gg_buffer.h" declline="98" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga8d0ad1fea98d61c8948a93ca962b2999" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t *</type>
        <definition>uint8_t * GG_Buffer_UseData</definition>
        <argsstring>(GG_Buffer *self)</argsstring>
        <name>GG_Buffer_UseData</name>
        <param>
          <type><ref refid="interface_g_g___buffer" kindref="compound">GG_Buffer</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="102" column="9" declfile="xp/common/gg_buffer.h" declline="102" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1gab240731784936a8c86d9089635801225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GG_Buffer_GetDataSize</definition>
        <argsstring>(const GG_Buffer *self)</argsstring>
        <name>GG_Buffer_GetDataSize</name>
        <param>
          <type>const <ref refid="interface_g_g___buffer" kindref="compound">GG_Buffer</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="106" column="8" declfile="xp/common/gg_buffer.h" declline="106" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga3efda6a3b6f4e8e3f7b3f1a60328032e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GG_StaticBuffer_AsBuffer</definition>
        <argsstring>(buffer)</argsstring>
        <name>GG_StaticBuffer_AsBuffer</name>
        <param>
          <type>buffer</type>
        </param>
        <briefdescription>
<para>Obtain the <ref refid="interface_g_g___buffer" kindref="compound">GG_Buffer</ref> interface of a <ref refid="struct_g_g___static_buffer" kindref="compound">GG_StaticBuffer</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="125" column="1" bodyfile="xp/common/gg_buffer.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga6cff9b55a03158d197c330c9cf43a57e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_StaticBuffer_Init</definition>
        <argsstring>(GG_StaticBuffer *self, const uint8_t *data, size_t data_size)</argsstring>
        <name>GG_StaticBuffer_Init</name>
        <param>
          <type><ref refid="struct_g_g___static_buffer" kindref="compound">GG_StaticBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Initialize a <ref refid="struct_g_g___static_buffer" kindref="compound">GG_StaticBuffer</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="128" column="6" declfile="xp/common/gg_buffer.h" declline="128" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1gadd8eaf129a1656211adf8c6f6d91ba52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_DynamicBuffer_Create</definition>
        <argsstring>(size_t size, GG_DynamicBuffer **buffer)</argsstring>
        <name>GG_DynamicBuffer_Create</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="class_g_g___dynamic_buffer" kindref="compound">GG_DynamicBuffer</ref> **</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new <ref refid="class_g_g___dynamic_buffer" kindref="compound">GG_DynamicBuffer</ref> object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size to pre-reserve for the buffer (may be 0, it can grow later). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to where the new object instance will be returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___errors_1ga74ac21a451c08367bf69467eb4756490" kindref="member">GG_SUCCESS</ref> if the object could be created, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="148" column="11" declfile="xp/common/gg_buffer.h" declline="148" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga4b3113c0006afb17ee911784e1865364" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interface_g_g___buffer" kindref="compound">GG_Buffer</ref> *</type>
        <definition>GG_Buffer * GG_DynamicBuffer_AsBuffer</definition>
        <argsstring>(GG_DynamicBuffer *self)</argsstring>
        <name>GG_DynamicBuffer_AsBuffer</name>
        <param>
          <type><ref refid="class_g_g___dynamic_buffer" kindref="compound">GG_DynamicBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Obtain the <ref refid="interface_g_g___buffer" kindref="compound">GG_Buffer</ref> interface for the object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="interface_g_g___buffer" kindref="compound">GG_Buffer</ref> interface for the object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="157" column="11" declfile="xp/common/gg_buffer.h" declline="157" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga2a321b9e73381f3241292053f7023708" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_g_g___dynamic_buffer" kindref="compound">GG_DynamicBuffer</ref> *</type>
        <definition>GG_DynamicBuffer * GG_DynamicBuffer_Retain</definition>
        <argsstring>(GG_DynamicBuffer *self)</argsstring>
        <name>GG_DynamicBuffer_Retain</name>
        <param>
          <type><ref refid="class_g_g___dynamic_buffer" kindref="compound">GG_DynamicBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>GG_BufferInterface::Retain </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="163" column="18" declfile="xp/common/gg_buffer.h" declline="163" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga2a70c1b62a0b694d2cd9c920b730e91c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_DynamicBuffer_Release</definition>
        <argsstring>(GG_DynamicBuffer *self)</argsstring>
        <name>GG_DynamicBuffer_Release</name>
        <param>
          <type><ref refid="class_g_g___dynamic_buffer" kindref="compound">GG_DynamicBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>GG_BufferInterface::Release </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="169" column="6" declfile="xp/common/gg_buffer.h" declline="169" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga62a6ade588b86c3b0e9220a5cf623c93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const uint8_t *</type>
        <definition>const uint8_t * GG_DynamicBuffer_GetData</definition>
        <argsstring>(const GG_DynamicBuffer *self)</argsstring>
        <name>GG_DynamicBuffer_GetData</name>
        <param>
          <type>const <ref refid="class_g_g___dynamic_buffer" kindref="compound">GG_DynamicBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>GG_BufferInterface::GetData </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="175" column="15" declfile="xp/common/gg_buffer.h" declline="175" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga3f3da89dcb7c6be6767c2a22c0255244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t *</type>
        <definition>uint8_t * GG_DynamicBuffer_UseData</definition>
        <argsstring>(GG_DynamicBuffer *self)</argsstring>
        <name>GG_DynamicBuffer_UseData</name>
        <param>
          <type><ref refid="class_g_g___dynamic_buffer" kindref="compound">GG_DynamicBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>GG_BufferInterface::UseData </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="181" column="9" declfile="xp/common/gg_buffer.h" declline="181" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1gac854d762405a66e0a74f01b944b8c164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GG_DynamicBuffer_GetDataSize</definition>
        <argsstring>(const GG_DynamicBuffer *self)</argsstring>
        <name>GG_DynamicBuffer_GetDataSize</name>
        <param>
          <type>const <ref refid="class_g_g___dynamic_buffer" kindref="compound">GG_DynamicBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>GG_BufferInterface::GetDataSize </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="187" column="8" declfile="xp/common/gg_buffer.h" declline="187" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1gaf1ad074a3a266e03520df1fd62d0a9a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_DynamicBuffer_Clone</definition>
        <argsstring>(const GG_DynamicBuffer *self, GG_DynamicBuffer **clone)</argsstring>
        <name>GG_DynamicBuffer_Clone</name>
        <param>
          <type>const <ref refid="class_g_g___dynamic_buffer" kindref="compound">GG_DynamicBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="class_g_g___dynamic_buffer" kindref="compound">GG_DynamicBuffer</ref> **</type>
          <declname>clone</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clone the object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clone</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to where the cloned object will be returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___errors_1ga74ac21a451c08367bf69467eb4756490" kindref="member">GG_SUCCESS</ref> if the object could be cloned, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="197" column="11" declfile="xp/common/gg_buffer.h" declline="197" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga09dcfa04a1ff966cdcc8e6821716de95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_DynamicBuffer_SetBuffer</definition>
        <argsstring>(GG_DynamicBuffer *self, uint8_t *buffer, size_t buffer_size)</argsstring>
        <name>GG_DynamicBuffer_SetBuffer</name>
        <param>
          <type><ref refid="class_g_g___dynamic_buffer" kindref="compound">GG_DynamicBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffer_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Configure the object to use an external buffer. NOTE: after calling this method, the buffer can no longer grow.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to use for data storage. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___errors_1ga74ac21a451c08367bf69467eb4756490" kindref="member">GG_SUCCESS</ref> if the object could be configured, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="209" column="12" declfile="xp/common/gg_buffer.h" declline="209" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga70524fff84267e724b668a9e70b849e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_DynamicBuffer_SetBufferSize</definition>
        <argsstring>(GG_DynamicBuffer *self, size_t buffer_size)</argsstring>
        <name>GG_DynamicBuffer_SetBufferSize</name>
        <param>
          <type><ref refid="class_g_g___dynamic_buffer" kindref="compound">GG_DynamicBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffer_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the size of the buffer used for data storage. NOTE: this does not change the data size, it only changes the buffer reserved for future growth of the data. The buffer size cannot be less than the current data size of the object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___errors_1ga74ac21a451c08367bf69467eb4756490" kindref="member">GG_SUCCESS</ref> if the object could be updated, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="222" column="12" declfile="xp/common/gg_buffer.h" declline="222" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga1fbc7deae3762cbff829528142cbf211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GG_DynamicBuffer_GetBufferSize</definition>
        <argsstring>(const GG_DynamicBuffer *self)</argsstring>
        <name>GG_DynamicBuffer_GetBufferSize</name>
        <param>
          <type>const <ref refid="class_g_g___dynamic_buffer" kindref="compound">GG_DynamicBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the size of the buffer used by this object. NOTE: the buffer size is not the data size. <simplesect kind="see"><para><ref refid="group___buffers_1gac854d762405a66e0a74f01b944b8c164" kindref="member">GG_DynamicBuffer_GetDataSize</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The size of the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="232" column="8" declfile="xp/common/gg_buffer.h" declline="232" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1gaca8a8cceeb6297be19733001c6b44446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_DynamicBuffer_Reserve</definition>
        <argsstring>(GG_DynamicBuffer *self, size_t buffer_size)</argsstring>
        <name>GG_DynamicBuffer_Reserve</name>
        <param>
          <type><ref refid="class_g_g___dynamic_buffer" kindref="compound">GG_DynamicBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffer_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reserve a minimum size the size for the buffer used for data storage. NOTE: this does not shrink the current buffer if it is already large enough.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum size of the buffer to reserve. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___errors_1ga74ac21a451c08367bf69467eb4756490" kindref="member">GG_SUCCESS</ref> if the buffer size could be reserved, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="243" column="11" declfile="xp/common/gg_buffer.h" declline="243" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga2f2a62458d9d6da26deafe69149d503a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_DynamicBuffer_SetData</definition>
        <argsstring>(GG_DynamicBuffer *self, const uint8_t *data, size_t data_size)</argsstring>
        <name>GG_DynamicBuffer_SetData</name>
        <param>
          <type><ref refid="class_g_g___dynamic_buffer" kindref="compound">GG_DynamicBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the data. The data is copied to the object&apos;s buffer, and the data size is updated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___errors_1ga74ac21a451c08367bf69467eb4756490" kindref="member">GG_SUCCESS</ref> if the data could be copied, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="255" column="12" declfile="xp/common/gg_buffer.h" declline="255" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1gaea4950020ab099218ac1fc6e31be391e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_DynamicBuffer_SetDataSize</definition>
        <argsstring>(GG_DynamicBuffer *self, size_t size)</argsstring>
        <name>GG_DynamicBuffer_SetDataSize</name>
        <param>
          <type><ref refid="class_g_g___dynamic_buffer" kindref="compound">GG_DynamicBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets/updates the data size. This updates the size of the data (typically called after updating the data directly in the buffer obtained from GG_DynamicBuffer_UseData, to reflect the new size of the data)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___errors_1ga74ac21a451c08367bf69467eb4756490" kindref="member">GG_SUCCESS</ref> if the size could be updated, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="267" column="12" declfile="xp/common/gg_buffer.h" declline="267" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga4b48d2271ab405de393c71eb17e0fb18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GG_DynamicBuffer_Equals</definition>
        <argsstring>(const GG_DynamicBuffer *self, const GG_Buffer *other)</argsstring>
        <name>GG_DynamicBuffer_Equals</name>
        <param>
          <type>const <ref refid="class_g_g___dynamic_buffer" kindref="compound">GG_DynamicBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const <ref refid="interface_g_g___buffer" kindref="compound">GG_Buffer</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare the contents of two data buffers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The data buffer object with which to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the data are the same, false if the data are different. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="277" column="6" declfile="xp/common/gg_buffer.h" declline="277" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga474a89e2ca026a0bd77bd8fbb5819cfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_DynamicBuffer_AppendData</definition>
        <argsstring>(GG_DynamicBuffer *self, const uint8_t *data, size_t data_size)</argsstring>
        <name>GG_DynamicBuffer_AppendData</name>
        <param>
          <type><ref refid="class_g_g___dynamic_buffer" kindref="compound">GG_DynamicBuffer</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append data at the end of an object&apos;s existing data. NOTE: this will automatically try to grow the buffer if needed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to append. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the data to append. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___errors_1ga74ac21a451c08367bf69467eb4756490" kindref="member">GG_SUCCESS</ref> if the data could be appended, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="289" column="11" declfile="xp/common/gg_buffer.h" declline="289" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga0f631b0e31dbd9355607e3ff46f54669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_SubBuffer_Create</definition>
        <argsstring>(GG_Buffer *data, size_t offset, size_t size, GG_Buffer **buffer)</argsstring>
        <name>GG_SubBuffer_Create</name>
        <param>
          <type><ref refid="interface_g_g___buffer" kindref="compound">GG_Buffer</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="interface_g_g___buffer" kindref="compound">GG_Buffer</ref> **</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new <ref refid="class_g_g___sub_buffer" kindref="compound">GG_SubBuffer</ref> object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer source data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset of the byte range within the source data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the byte range within the source data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to where the new object instance will be returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___errors_1ga74ac21a451c08367bf69467eb4756490" kindref="member">GG_SUCCESS</ref> if the object could be created, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="309" column="11" declfile="xp/common/gg_buffer.h" declline="309" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1gab5e4267a0c04ae9e54b22ea6d140eb94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_BufferSource_GetData</definition>
        <argsstring>(const GG_BufferSource *self, void *data)</argsstring>
        <name>GG_BufferSource_GetData</name>
        <param>
          <type>const <ref refid="interface_g_g___buffer_source" kindref="compound">GG_BufferSource</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="344" column="6" declfile="xp/common/gg_buffer.h" declline="344" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1gadf756efc0146207a8dfa30531d9d88f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GG_BufferSource_GetDataSize</definition>
        <argsstring>(const GG_BufferSource *self)</argsstring>
        <name>GG_BufferSource_GetDataSize</name>
        <param>
          <type>const <ref refid="interface_g_g___buffer_source" kindref="compound">GG_BufferSource</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="348" column="8" declfile="xp/common/gg_buffer.h" declline="348" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1ga7b87588650523cb1c0aa75504952c925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GG_StaticBufferSource_AsBufferSource</definition>
        <argsstring>(buffer)</argsstring>
        <name>GG_StaticBufferSource_AsBufferSource</name>
        <param>
          <type>buffer</type>
        </param>
        <briefdescription>
<para>Obtain the <ref refid="interface_g_g___buffer_source" kindref="compound">GG_BufferSource</ref> interface of a <ref refid="struct_g_g___static_buffer_source" kindref="compound">GG_StaticBufferSource</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="367" column="1" bodyfile="xp/common/gg_buffer.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group___buffers_1gaf9a62315fb306d56ff86ada607daefa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_StaticBufferSource_Init</definition>
        <argsstring>(GG_StaticBufferSource *self, const uint8_t *data, size_t data_size)</argsstring>
        <name>GG_StaticBufferSource_Init</name>
        <param>
          <type><ref refid="struct_g_g___static_buffer_source" kindref="compound">GG_StaticBufferSource</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Initialize a <ref refid="struct_g_g___static_buffer_source" kindref="compound">GG_StaticBufferSource</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_buffer.h" line="370" column="6" declfile="xp/common/gg_buffer.h" declline="370" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>General purpose data buffers</para>
<para>Ring Buffer </para>
    </detaileddescription>
  </compounddef>
</doxygen>
