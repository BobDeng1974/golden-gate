<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="classGG__Mutex" kind="class" language="C++" prot="public">
    <compoundname>GG_Mutex</compoundname>
      <sectiondef kind="related">
      <memberdef kind="function" id="group__Threads_1ga1ba17a80f2c144726dadecad61147aff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__Errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_Mutex_LockAutoCreate</definition>
        <argsstring>(GG_Mutex **mutex)</argsstring>
        <name>GG_Mutex_LockAutoCreate</name>
        <param>
          <type><ref refid="classGG__Mutex" kindref="compound">GG_Mutex</ref> **</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mutex locking/creation</para>
<para>This is useful for creating/locking mutexes that are used as singletons for example. if *mutex is NULL, the mutex will be created in a thread-safe manner (it is ok to have several threads try to create the same mutex at the same time), and will then be locked. Otherwise, it will just be locked.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a variable in which the mutex will be returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__Errors_1ga74ac21a451c08367bf69467eb4756490" kindref="member">GG_SUCCESS</ref> if the mutex could be created, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="169" column="1" declfile="xp/common/gg_threads.h" declline="169" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Threads_1gae9e2877d7b30ba04980c7000817d7872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__Errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_Mutex_Lock</definition>
        <argsstring>(GG_Mutex *self)</argsstring>
        <name>GG_Mutex_Lock</name>
        <param>
          <type><ref refid="classGG__Mutex" kindref="compound">GG_Mutex</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lock a mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__Errors_1ga74ac21a451c08367bf69467eb4756490" kindref="member">GG_SUCCESS</ref> if the mutex could be locked, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="180" column="1" declfile="xp/common/gg_threads.h" declline="180" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Threads_1gae51dc97814b4332548e1b55ee003a73a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__Errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_Mutex_Unlock</definition>
        <argsstring>(GG_Mutex *self)</argsstring>
        <name>GG_Mutex_Unlock</name>
        <param>
          <type><ref refid="classGG__Mutex" kindref="compound">GG_Mutex</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unlock a mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__Errors_1ga74ac21a451c08367bf69467eb4756490" kindref="member">GG_SUCCESS</ref> if the mutex could be locked, or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="191" column="1" declfile="xp/common/gg_threads.h" declline="191" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Threads_1ga5ad0d3388bd9d9c537b96dec616c8827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_Mutex_Destroy</definition>
        <argsstring>(GG_Mutex *self)</argsstring>
        <name>GG_Mutex_Destroy</name>
        <param>
          <type><ref refid="classGG__Mutex" kindref="compound">GG_Mutex</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_threads.h" line="201" column="1" declfile="xp/common/gg_threads.h" declline="201" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Mutex object that can be used to prevent concurrent access to data structures from multiple threads. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="xp/common/gg_threads.h" line="138" column="1"/>
    <listofallmembers>
      <member refid="group__Threads_1ga5ad0d3388bd9d9c537b96dec616c8827" prot="public" virt="non-virtual"><scope>GG_Mutex</scope><name>GG_Mutex_Destroy</name></member>
      <member refid="group__Threads_1gae9e2877d7b30ba04980c7000817d7872" prot="public" virt="non-virtual"><scope>GG_Mutex</scope><name>GG_Mutex_Lock</name></member>
      <member refid="group__Threads_1ga1ba17a80f2c144726dadecad61147aff" prot="public" virt="non-virtual"><scope>GG_Mutex</scope><name>GG_Mutex_LockAutoCreate</name></member>
      <member refid="group__Threads_1gae51dc97814b4332548e1b55ee003a73a" prot="public" virt="non-virtual"><scope>GG_Mutex</scope><name>GG_Mutex_Unlock</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
